<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>01-Java基础</title>
      <link href="/2020/07/09/01-java-ji-chu/"/>
      <url>/2020/07/09/01-java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="1-Java基础概念与常识"><a href="#1-Java基础概念与常识" class="headerlink" title="1. Java基础概念与常识"></a>1. Java基础概念与常识</h2><h3 id="1-Java的三大特性"><a href="#1-Java的三大特性" class="headerlink" title="1. Java的三大特性"></a>1. Java的三大特性</h3><p><strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>。</p><p><strong>封装</strong>：隐藏具体的属性和细节，仅对外提供公共访问方式。如getter，setter。<strong>目的/好处</strong>：增强安全性，简化编程，便于使用。</p><p><strong>继承</strong>：将多个相同的属性和方法提取出来，新建一个父类。<strong>目的/好处</strong>：代码复用。</p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法（重写）。</li></ol><p><strong>多态</strong>： 在声明时使用父类，在实现或调用时使用具体的子类 ，不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态。<strong>目的/好处</strong>：提高代码的灵活性和拓展性。</p><ul><li>多态有两种表现形式，<strong>重载</strong>和<strong>重写</strong>。</li><li>重载：一个类中可以有多个同名的方法，但参数列表必须不同，这表现的是同一个类中方法的多态性。</li><li>重写：子类中可以定义父类中同名的方法，这表现的是父子类方法的多态性。</li></ul><table><thead><tr><th align="center">区别点</th><th align="center">重载方法</th><th align="center">重写方法</th></tr></thead><tbody><tr><td align="center">发生范围</td><td align="center">同一个类</td><td align="center">父子类</td></tr><tr><td align="center">参数列表</td><td align="center">必须修改</td><td align="center">不能修改</td></tr><tr><td align="center">返回类型</td><td align="center">可修改</td><td align="center">不能修改</td></tr><tr><td align="center">异常</td><td align="center">可修改</td><td align="center">可以减少或删除，不能抛出新的或者更广的异常</td></tr><tr><td align="center">访问修饰符</td><td align="center">可修改</td><td align="center">不能做更严格的限制（可以降低限制）</td></tr><tr><td align="center">发生阶段</td><td align="center">编译期</td><td align="center">运行期</td></tr></tbody></table><hr><h3 id="2-JVM、JDK-和-JRE"><a href="#2-JVM、JDK-和-JRE" class="headerlink" title="2. JVM、JDK 和 JRE"></a>2. JVM、JDK 和 JRE</h3><ol><li><p>JVM：Java 虚拟机，是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和<strong>不同系统的 JVM</strong> 实现是 Java 语言“一次编译，随处运行”的关键所在。 </p></li><li><p>JDK：Java开发工具包，是功能齐全的 Java SDK，拥有 JRE 拥有的一切，此外还有编译器（javac）和工具（javadoc 和 jdb）。<strong>能够创建和编译程序</strong>。</p><ul><li>javadoc：它从程序源代码中抽取类、方法、成员等注释形成一个和源代码配套的API帮助文档。</li><li>jdb：调试器（Java Debugger），和 IDEA、Eclipse 等 IDE 中提供的调试功能共同依赖同一套调试 API，也就是 Java Platform Debugger Architecture (JPDA)。</li></ul></li><li><p>JRE：Java运行时环境，是运行已编译 Java 程序所需所有内容的集合，包括 JVM ，Java 类库。Java 命令等基础构件。但<strong>不能用于创建新程序</strong>。</p></li></ol><hr><h3 id="3-Java-和-C-的对比"><a href="#3-Java-和-C-的对比" class="headerlink" title="3. Java 和 C++ 的对比"></a>3. Java 和 C++ 的对比</h3><ol><li>两者都是面向对象的语言，都支持封装、继承和多态；</li><li>Java 不提供<strong>指针</strong>直接访问内存，程序内存更加安全。这里延伸出的一个问题是：<strong>*Java中的引用和C++中的指针有什么区别？</strong></li><li>Java 中的类是单<strong>继承</strong>的，C++ 中可以多继承。但 Java 中的接口是可以多继承的。</li><li>Java 有<strong>内存管理机制</strong>，不需要程序员手动释放内存。</li><li>C/C++ 中，字符串或字符数组最后都会有一个额外字符 ‘/0’ 来表示结束。但 Java 中没有结束符这个概念。<a href="https://blog.csdn.net/sszgg2006/article/details/49148189" target="_blank" rel="noopener">参考文章</a>。</li></ol><hr><h3 id="4-Java-语言“编译与解释并存”"><a href="#4-Java-语言“编译与解释并存”" class="headerlink" title="4. Java 语言“编译与解释并存”"></a>4. Java 语言“编译与解释并存”</h3><ol><li>理解：高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。比如，你想阅读一本英文名著，你可以找一个英文翻译人员帮助你阅读， 有两种选择方式，你可以先等翻译人员将全本的英文名著（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。 <strong>编译型先编译完再执行，解释型边解释边执行</strong>。</li><li>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（*.class 文件），这种字节码必须由 Java 解释器来解释执行。因此，我们可以认为 Java 语言编译与解释并存。 </li></ol><hr><h2 id="2-Java-基础核心"><a href="#2-Java-基础核心" class="headerlink" title="2. Java 基础核心"></a>2. Java 基础核心</h2><h3 id="1-Java中的基本数据类型"><a href="#1-Java中的基本数据类型" class="headerlink" title="1. Java中的基本数据类型"></a>1. Java中的基本数据类型</h3><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">内存占用</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">字节型</td><td align="center">byte</td><td align="center">1字节</td><td align="center">Byte</td></tr><tr><td align="center">短整型</td><td align="center">short</td><td align="center">2字节</td><td align="center">Short</td></tr><tr><td align="center">整形</td><td align="center">int</td><td align="center">4字节</td><td align="center">Integer</td></tr><tr><td align="center">长整形</td><td align="center">long</td><td align="center">8字节</td><td align="center">Long</td></tr><tr><td align="center">单精度浮点数</td><td align="center">float</td><td align="center">4字节</td><td align="center">Float</td></tr><tr><td align="center">双精度浮点数</td><td align="center">double</td><td align="center">8字节</td><td align="center">Double</td></tr><tr><td align="center">字符型</td><td align="center">char</td><td align="center">2字节</td><td align="center">Character</td></tr><tr><td align="center">布尔型</td><td align="center">boolean</td><td align="center">1字节</td><td align="center">Boolean</td></tr></tbody></table><ul><li>自动装箱与拆箱，详细内容见：<a href="https://www.cnblogs.com/dolphin0520/p/3780005.html" target="_blank" rel="noopener">深入剖析 Java 中的装箱和拆箱</a><ul><li><strong>装箱</strong>：将基本类型用它们对应的应用类型包装起来；</li><li><strong>拆箱</strong>：将包装类转换为基本类型。</li></ul></li></ul><hr><h3 id="2-包装类和常量池"><a href="#2-包装类和常量池" class="headerlink" title="2. 包装类和常量池"></a>2. 包装类和常量池</h3><p>Java 中大部分基础类型的包装类都实现了<strong>常量池技术</strong>：</p><ol><li><strong>Byte、Short、Integer、Long</strong> 默认创建了数值 [-128,127] 的相应类型的缓存数据；</li><li><strong>Character</strong>创建了数值在 [0,127] 范围的缓存数据；</li><li><strong>Boolean</strong> 直接返回 true or false；</li></ol><ul><li>如果数值<strong>不属于</strong>缓存的范围，会创建新的对象。</li><li>两种浮点类型的包装类 <strong>Float</strong> 和 <strong>Double</strong> 没有实现常量池技术。</li><li><code>Integer i1=40</code>；Java 在编译的时候会直接将代码封装成 <code>Integer i1=Integer.valueOf(40);</code>，从而使用常量池中的对象。 </li><li><code>Integer i1 = new Integer(40);</code> 这种情况下会创建新的对象。 </li></ul><pre class=" language-java"><code class="language-java">  Integer i1 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>  Integer i2 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>  Integer i3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  Integer i4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Integer i5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Integer i6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1=i2   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1=i2+i3   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2 <span class="token operator">+</span> i3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1=i4   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i1 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i4=i5   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i4 <span class="token operator">==</span> i5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i4=i5+i6   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i4 <span class="token operator">==</span> i5 <span class="token operator">+</span> i6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"40=i5+i6   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">==</span> i5 <span class="token operator">+</span> i6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><pre class=" language-java"><code class="language-java">i1<span class="token operator">=</span>i2   <span class="token boolean">true</span>i1<span class="token operator">=</span>i2<span class="token operator">+</span>i3   <span class="token boolean">true</span>i1<span class="token operator">=</span>i4   <span class="token boolean">false</span>i4<span class="token operator">=</span>i5   <span class="token boolean">false</span>i4<span class="token operator">=</span>i5<span class="token operator">+</span>i6   <span class="token boolean">true</span><span class="token number">40</span><span class="token operator">=</span>i5<span class="token operator">+</span>i6   <span class="token boolean">true</span></code></pre><ul><li><strong>装箱和拆箱的理解</strong>：语句 i4 == i5 + i6，因为+这个操作符不适用于 Integer 对象，首先 i5 和 i6 进行自动拆箱操作，进行数值相加，即 i4 == 40。然后 Integer 对象无法与数值进行直接比较，所以 i4 自动拆箱转为 int 值 40，最终这条语句转为 40 == 40 进行数值比较。 </li></ul><hr><h3 id="3-字符型常量和字符串常量的区别"><a href="#3-字符型常量和字符串常量的区别" class="headerlink" title="3. 字符型常量和字符串常量的区别"></a>3. 字符型常量和字符串常量的区别</h3><ol><li>形式上：字符常量是单引号引起的一个字符；字符串常量是双引号引起的若干字符。</li><li>含义上：字符常量相当于一个整型值（ASCII），可以参加表达式运算；字符串常量代表一个地址值（内存中的位置）。</li><li>占内存大小：字符常量占 2 字节，字符串常量占若干字节。注意：<strong>char 在其他语言中占 1 字节居多，但在 Java 中占 2 字节</strong>。</li></ol><hr><h3 id="4-Java-泛型，类型擦除"><a href="#4-Java-泛型，类型擦除" class="headerlink" title="4. Java 泛型，类型擦除"></a>4. Java 泛型，类型擦除</h3><ul><li><p>泛型提供了编译时<strong>类型安全检测机制</strong>，该机制允许程序员在编译时检测到非法的类型。<strong>泛型的本质是参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数。 </p></li><li><p><strong>Java 的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除。</strong><a href="https://www.cnblogs.com/wuqinglong/p/9456193.html" target="_blank" rel="noopener">Java 泛型类型擦除</a></p></li><li><p>泛型一般有三种使用方式：<strong>泛型类</strong>、<strong>泛型接口</strong>和<strong>泛型方法</strong>。</p><ol><li><strong>泛型类</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><span class="token comment" spellcheck="true">//在实例化泛型类时，必须指定T的具体类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>     <span class="token keyword">private</span> T key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Generic</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实例化泛型类（<strong>类似 List 等类</strong>）：</p><pre class=" language-java"><code class="language-java">Generic<span class="token operator">&lt;</span>Integer<span class="token operator">></span> genericInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><strong>泛型接口</strong></li></ol><ul><li>实现泛型接口时，可以不指定类型，也可以指定类型。</li></ul><ol start="3"><li><strong>泛型方法</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span> E <span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray <span class="token punctuation">)</span>   <span class="token punctuation">{</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span> E element <span class="token operator">:</span> inputArray <span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%s "</span><span class="token punctuation">,</span> element <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这是一个打印数组的方法，可以处理各种类型的数组。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//基本数据类型的数组必须是包装类，如Integer、Double</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printArray</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li><p><strong>泛型常用通配符</strong></p><ol><li>？ 表示不确定类型；</li><li>T   表示一个具体的类型；</li><li>K V 表示键值中的 key value；</li><li>E   表示 element。</li></ol><ul><li>更多内容查看：<a href="https://juejin.im/post/5d5789d26fb9a06ad0056bd9" target="_blank" rel="noopener">聊一聊Java泛型中的通配符</a></li></ul></li></ol></li></ul><hr><h3 id="5-static关键字"><a href="#5-static关键字" class="headerlink" title="5. static关键字"></a>5. static关键字</h3><ul><li>意思是静态的、全局的，被修饰内容在一定范围内是<strong>共享的</strong>，谁都可以访问，此时需要注意<strong>并发</strong>读写的问题。</li></ul><ol><li><p><strong>修饰的对象</strong></p><ul><li>static 只能修饰<strong>类变量、方法和方法块</strong>。</li></ul><ol><li><p>当 static 修饰<strong>类变量</strong>时，如果该变量是 public 修饰，表示该变量任何类都可以访问，而且无需初始化类，直接使用<strong>类名.static变量</strong>这种形式访问即可。</p><ul><li>当 static 修饰<strong>类变量</strong>时， 需要注意<strong>线程</strong>安全问题，有两种解决方法，一是使用线程安全的数据结构，如用 <code>CopyOnWriteArrayList</code> 代替 <code>ArrayList</code> 。二是每次访问时手动加锁。</li></ul></li><li><p>当 static 修饰<strong>方法</strong>时，代表该方法和类对象是无关的，任意类都可以访问（权限public）。</p><ul><li>当 static 修饰<strong>方法</strong>时，该方法只能调用被 static 修饰的方法，不能调用其他方法。</li><li>当 static 修饰<strong>方法</strong>时，该方法内部的变量在执行时是<strong>没有</strong>线程安全的问题的。方法执行时，数据运行在<strong>栈</strong>里，栈的数据每个线程都是隔离开的，所有不会有线程安全的问题。</li></ul></li><li><p>当 static 修饰<strong>方法块</strong>时，叫做静态代码块，常常用在类启动之前，进行初始化。需要<strong>注意</strong>的是，静态代码块只能调用被 static 修饰的变量，并且要写在前面，否则会报错。</p></li></ol></li><li><p><strong>初始化的时机</strong></p><ol><li><strong>父类</strong>的静态变量和静态代码块比子类优先初始化；</li><li>一个类中，<strong>静态变量</strong>和静态代码块比构造器先初始化。</li></ol><ul><li>类中被 static 修饰的<strong>方法</strong>，在类初始化的时候<strong>不会初始化</strong>，只有当被调用时，才会被执行。</li></ul></li></ol><ul><li><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basic/final,static,this,super" target="_blank" rel="noopener">更多关键字内容参考</a>。</li></ul><hr><h3 id="6-final关键字"><a href="#6-final关键字" class="headerlink" title="6. final关键字"></a>6. final关键字</h3><ol><li>被 final 修饰的类，表明该类无法继承；</li><li>被 final 修饰的方法，表明该方法无法覆盖重写；</li><li>被 final 修饰的变量，表明该变量的内存地址无法改变，并且在声明时必须完成初始化。</li></ol><ul><li>被 final 修饰的变量，并不是不可以修改其值，对于 List 和 Map 这种集合类，被 final 修饰后，其<strong>内部值</strong>是可以修改的，但<strong>内存地址</strong>不可以修改。</li></ul><hr><h3 id="7-volatile关键字"><a href="#7-volatile关键字" class="headerlink" title="7. volatile关键字"></a>7. volatile关键字</h3><ul><li>volatile 的意思是可见的，常用来修饰某个<strong>共享变量</strong>，作用是当共享变量被修改后，会及时将变化通知到其他线程。</li></ul><p>我们再说原理之前，先说下基础知识。就是在多核 CPU 下，为了提高效率，线程在拿值时，是直接和 CPU <strong>缓存</strong>打交道的，而不是内存。主要是因为 CPU 缓存执行速度更快，比如线程要拿值 C，会直接从 CPU 缓存中拿， CPU 缓存中没有，就会从内存中拿，所以线程读的操作永远都是拿 CPU 缓存的值。</p><p>这时候会产生一个问题，CPU 缓存中的值和内存中的值可能并不是时刻都同步，导致线程计算的值可能不是最新的，共享变量的值有可能已经被其它线程所修改了，但此时修改是机器内存的值，CPU 缓存的值还是老的，导致计算会出现问题。</p><p>这时候有个机制，就是内存会主动通知 CPU 缓存。当前共享变量的值已经失效了，你需要重新来拉取一份，CPU 缓存就会重新从内存中拿取一份最新的值。</p><p>volatile 关键字就会触发这种机制，加了 volatile 关键字的变量，就会被识别成共享变量，内存中值被修改后，会通知到各个 CPU 缓存，使 CPU 缓存中的值也对应被修改，从而保证线程从 CPU 缓存中拿取出来的值是最新的。</p><hr><h3 id="8-default关键字"><a href="#8-default关键字" class="headerlink" title="8. default关键字"></a>8. default关键字</h3><ul><li>default 关键字一般用在接口的方法上，表明对于该方法，子类无需覆盖重写，但接口中必须有默认实现。</li></ul><hr><h3 id="9-Java-中的值传递"><a href="#9-Java-中的值传递" class="headerlink" title="9. Java 中的值传递"></a>9. Java 中的值传递</h3><ul><li><strong>按值调用(call by value)</strong>表示方法接收的是调用者提供的<strong>值</strong>，而<strong>按引用调用（call by reference)</strong>表示方法接收的是调用者提供的<strong>变量地址</strong>。</li><li><strong>一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值</strong>。</li><li><strong>Java 程序设计语言总是采用按值调用</strong>。也就是说，<strong>方法得到的是所有参数值的一个拷贝</strong>。</li></ul><p>例1：<strong>基础类型</strong>的参数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num1 = "</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num2 = "</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">a <span class="token operator">=</span> <span class="token number">20</span>b <span class="token operator">=</span> <span class="token number">10</span>num1 <span class="token operator">=</span> <span class="token number">10</span>num2 <span class="token operator">=</span> <span class="token number">20</span></code></pre><ul><li><strong>基础类型的参数按值传递，拷贝得到的就是变量的值，原变量的值不能被修改</strong>。</li></ul><p>例2：<strong>对象</strong>作为参数，交换对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Test<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1:"</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2:"</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Student x<span class="token punctuation">,</span> Student y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student temp <span class="token operator">=</span> x<span class="token punctuation">;</span>    x <span class="token operator">=</span> y<span class="token punctuation">;</span>    y <span class="token operator">=</span> temp<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x:"</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y:"</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">x<span class="token operator">:</span>小李y<span class="token operator">:</span>小张s1<span class="token operator">:</span>小张s2<span class="token operator">:</span>小李</code></pre><ul><li><strong>对象类型</strong>的参数按值传递，但要注意的是，<strong>对象类型的值就是对象的地址值，因此拷贝得到的对象与原对象指向同一个地址</strong>。</li><li><strong>本例中进行交换操作，只是对拷贝的对象进行交换，并不会影响到原对象。但如果对拷贝的对象进行修改内容的操作，则会对原对象造成影响。</strong></li></ul><p>例3：<strong>对象</strong>作为参数，修改对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原s1:"</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原s2:"</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新s1:"</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新s2:"</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Student x<span class="token punctuation">,</span> Student y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String temp <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    y<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x:"</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y:"</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">原s1<span class="token operator">:</span>小张原s2<span class="token operator">:</span>小李x<span class="token operator">:</span>小李y<span class="token operator">:</span>小张新s1<span class="token operator">:</span>小李新s2<span class="token operator">:</span>小张</code></pre><ul><li><strong>本例中对拷贝的对象进行交换内容的操作，导致原对象内容也发生了改变</strong>。</li></ul><hr><h3 id="10-深拷贝和浅拷贝"><a href="#10-深拷贝和浅拷贝" class="headerlink" title="10. 深拷贝和浅拷贝"></a>10. 深拷贝和浅拷贝</h3><ol><li><strong>浅拷贝</strong>：对于引用数据类型进行引用传递的拷贝，称为浅拷贝。<strong>修改拷贝对象的内容，原对象也会发生改变</strong>。</li><li><strong>深拷贝</strong>：对于引用数据类型，创建一个新的对象，并复制其内容，称为深拷贝。<strong>修改拷贝对象的内容，原对象不会发生改变</strong>。</li></ol><ul><li><strong>基本数据类型始终都是值传递</strong>。</li></ul><hr><h3 id="11-异常"><a href="#11-异常" class="headerlink" title="11. 异常"></a>11. 异常</h3><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 <strong>Throwable 类</strong>。Throwable： 有两个重要的子类：<strong>Exception（异常）</strong> 和 <strong>Error（错误）</strong> ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。 </p><ul><li><strong>Error（错误）:是程序无法处理的错误</strong>，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java 虚拟机运行错误（Virtual Machine Error），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。 </li><li><strong>Exception（异常）:是程序本身可以处理的异常</strong>。Exception 类有一个重要的子类 <strong>RuntimeException</strong>。RuntimeException 异常由 Java 虚拟机抛出。<strong>NullPointerException</strong>（要访问的变量没有引用任何对象时，抛出该异常）、<strong>ArithmeticException</strong>（算术运算异常，一个整数除以 0 时，抛出该异常）和 <strong>ArrayIndexOutOfBoundsException</strong> （下标越界异常）。 </li><li><strong>注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。</strong> </li></ul><hr><h3 id="12-thy-catch-finally"><a href="#12-thy-catch-finally" class="headerlink" title="12. thy-catch-finally"></a>12. thy-catch-finally</h3><ul><li><strong>try块</strong>：用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。 </li><li><strong>catch 块：</strong> 用于处理 try 捕获到的异常。 </li><li><strong>finally 块：</strong> 无论是否捕获或处理异常，finally 块里的语句都会被执行。<strong>当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行</strong>。</li></ul><p><strong>在以下 4 种特殊情况下，finally 块不会被执行：</strong></p><ol><li>在 finally 语句块第一行发生了异常。 因为在其他行，finally 块还是会得到执行</li><li>在前面的代码中用了 System.exit(int)已退出程序。 exit 是带参函数 ；若该语句在异常语句之后，finally 会执行</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><ul><li><strong>注意</strong>：当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。 </li></ul><p><img src="01-Java%E5%9F%BA%E7%A1%80.assets/%E5%BC%82%E5%B8%B82.png" alt="异常层次图"></p><p><img src="01-Java%E5%9F%BA%E7%A1%80.assets/%E5%BC%82%E5%B8%B8.png" alt=""></p><hr><h3 id="13-I-O流"><a href="#13-I-O流" class="headerlink" title="13. I/O流"></a>13. I/O流</h3><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><p>Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。 </p><ul><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p><img src="01-Java%E5%9F%BA%E7%A1%80.assets/IO%E6%B5%811.png" alt=""></p><p><img src="01-Java%E5%9F%BA%E7%A1%80.assets/IO%E6%B5%812.png" alt=""></p><hr><h2 id="3-面向对象"><a href="#3-面向对象" class="headerlink" title="3. 面向对象"></a>3. 面向对象</h2><h3 id="1-面向对象和面向过程"><a href="#1-面向对象和面向过程" class="headerlink" title="1. 面向对象和面向过程"></a>1. 面向对象和面向过程</h3><ul><li><strong>面向过程</strong>：可以理解为一件复杂的事，分为几个步骤，一步一步去做。</li><li><strong>面向对象</strong>：可以理解为一件复杂的事，分为一个模块，分别找不同的人来做。</li><li>面向过程和面向对象的语言<strong>性能对比</strong>：</li></ul><p>Java 性能差的主要原因并不是因为它是面向对象语言，而是 Java 是半编译语言，最终的执行代码并不是可以直接被 CPU 执行的二进制机械码。而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比 Java 好。</p><hr><h3 id="2-构造器和构造方法"><a href="#2-构造器和构造方法" class="headerlink" title="2. 构造器和构造方法"></a>2. 构造器和构造方法</h3><ol><li>构造器 (Constructor) 不可以被重写 (override)，但可以被重载 (overload)，所以一个类中可以有多个构造函数。</li><li><strong>无参构造方法的作用</strong>：Java 中构造方法执行的顺序是<strong>先父类构造方法，再子类构造方法</strong>。如果在子类中，子类构造方法前没有用 <code>super</code> 来调用父类特定的构造方法，则会<strong>自动调用父类中的 “无参构造方法”</strong>。因此，如果父类中没有 “无参构造方法”，而子类中又没有用 <code>super</code> 来调用父类特定的构造方法，编译时就会发生错误。</li></ol><hr><h3 id="3-Java中抽象类和接口的区别"><a href="#3-Java中抽象类和接口的区别" class="headerlink" title="3. Java中抽象类和接口的区别"></a>3. Java中抽象类和接口的区别</h3><ol><li>抽象类用abstract修饰，接口用interface修饰；</li><li>抽象类只能被单继承，接口可以实现多个；</li><li>抽象类中可以有非抽象方法，接口中必须都是抽象方法；</li><li>接口中成员变量必须是public static final修饰，必须赋初值，实现类不能重新定义或修改。抽象类中的成员变量默认default，子类可以重新定义或修改；</li><li>抽象类中允许有静态方法(static修饰)，接口中的方法不允许有静态方法。 </li></ol><hr><h3 id="4-Java中抽象类和普通类的区别"><a href="#4-Java中抽象类和普通类的区别" class="headerlink" title="4. Java中抽象类和普通类的区别"></a>4. Java中抽象类和普通类的区别</h3><ol><li>抽象类中有抽象方法，普通类中没有；</li><li>抽象类中可以有构造方法，但不能实例化。普通类可以实例化；</li><li>抽象方法不能被声明为静态(static修饰)，普通类中的方法都可以被声明为静态；</li><li>抽象类的子类必须重写所有抽象方法，否则必须是抽象类。普通类的子类只需声明继承；</li></ol><hr><h3 id="5-成员变量和局部变量的区别"><a href="#5-成员变量和局部变量的区别" class="headerlink" title="5. 成员变量和局部变量的区别"></a>5. 成员变量和局部变量的区别</h3><ol><li>从语法形式上看：成员变量是定义在类中，方法外的，局部变量是定义于方法内的。成员变量可以被<strong>权限修饰符如 <code>public</code> <code>private</code> *<em>等修饰，而局部变量不可以。成员变量可以被 *</em><code>static</code> *<em>修饰，而局部变量不可以。但是两者都可以被 *</em><code>final</code></strong> 修饰。</li><li>从存储方式上看：如果成员变量是使用 <code>static</code> 修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code> 修饰，这个成员变量是属于实例的。而<strong>对象存在于堆内存</strong>，<strong>局部变量则存在于栈内存</strong>。 </li><li>从生存时间上看：成员变量是对象的一部分，它随着<strong>对象</strong>的创建而存在，而局部变量随着<strong>方法</strong>的调用而自动消失。 </li><li>初值：成员变量如果没有被赋初值，则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值，<strong>在使用前必须手动赋值</strong>。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/07/07/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2020/07/07/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>2020年7月7日搭建个人博客，我的第一篇博客，测试。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/07/hello-world/"/>
      <url>/2020/07/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
